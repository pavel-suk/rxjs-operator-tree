{
    "1031": {
        "id": "1031",
        "label": "and cancel the previous nested Observable when a new value arrives",
        "options": [
            "6386",
            "9ede"
        ]
    },
    "1247": {
        "id": "1247",
        "label": "I want to output a value computed from values of the source Observables",
        "options": [
            "b2a1",
            "737a",
            "8f4b"
        ]
    },
    "1637": {
        "id": "1637",
        "label": "skip",
        "path": "api/operators/skip",
        "docType": "function"
    },
    "1966": {
        "id": "1966",
        "label": "publishBehavior"
    },
    "2489": {
        "id": "2489",
        "label": "concat",
        "path": "api/index/function/concat",
        "docType": "function"
    },
    "2960": {
        "id": "2960",
        "label": "if they are at the start of the Observable",
        "options": [
            "5771",
            "e4b6",
            "bbfb"
        ]
    },
    "3122": {
        "id": "3122",
        "label": "supporting Node.js callback style API",
        "options": [
            "728e"
        ]
    },
    "3552": {
        "id": "3552",
        "label": "skipUntil",
        "path": "api/operators/skipUntil",
        "docType": "function"
    },
    "4664": {
        "id": "4664",
        "label": "and emit the group as an array",
        "options": [
            "240f"
        ]
    },
    "5158": {
        "id": "5158",
        "label": "I want to output the values from either of them",
        "options": [
            "2b00"
        ]
    },
    "5388": {
        "id": "5388",
        "label": "by emitting the last value in each time window",
        "options": [
            "330a",
            "960f"
        ]
    },
    "5579": {
        "id": "5579",
        "label": "defer",
        "path": "api/index/function/defer",
        "docType": "function"
    },
    "5583": {
        "id": "5583",
        "label": "I want to allow some values to pass",
        "options": [
            "df20",
            "2960",
            "3fd4",
            "0659",
            "0f5d"
        ]
    },
    "5771": {
        "id": "5771",
        "label": "and only the first value",
        "options": [
            "b312"
        ]
    },
    "5797": {
        "id": "5797",
        "label": "where the nested Observable is calculated for each value",
        "options": [
            "3b40"
        ]
    },
    "6118": {
        "id": "6118",
        "label": "where time windows are determined by a time duration",
        "options": [
            "d32c"
        ]
    },
    "6347": {
        "id": "6347",
        "label": "I want to output a value computed from values of the source Observables",
        "options": [
            "530e",
            "4b7b"
        ]
    },
    "6374": {
        "id": "6374",
        "label": "switchMap",
        "path": "api/operators/switchMap",
        "docType": "function"
    },
    "6386": {
        "id": "6386",
        "label": "where the nested Observable is the same for every value",
        "options": [
            "96da"
        ]
    },
    "6406": {
        "id": "6406",
        "label": "delayWhen",
        "path": "api/operators/delayWhen",
        "docType": "function"
    },
    "6733": {
        "id": "6733",
        "label": "and output the computed values as a nested Observable when the source emits a value while unsubscribing from the previous nested Observable",
        "options": [
            "9990"
        ]
    },
    "7323": {
        "id": "7323",
        "label": "single",
        "path": "api/operators/single",
        "docType": "function"
    },
    "7611": {
        "id": "7611",
        "label": "I want to re-subscribe",
        "options": [
            "aec0",
            "da4f"
        ]
    },
    "7741": {
        "id": "7741",
        "label": "in batches of a particular size",
        "options": [
            "af8f",
            "f114"
        ]
    },
    "8173": {
        "id": "8173",
        "label": "I want to subscribe to each in order",
        "options": [
            "a32a"
        ]
    },
    "8608": {
        "id": "8608",
        "label": "coming from the DOM or Node.js or similar",
        "options": [
            "03f5"
        ]
    },
    "9798": {
        "id": "9798",
        "label": "takeUntil",
        "path": "api/operators/takeUntil",
        "docType": "function"
    },
    "9990": {
        "id": "9990",
        "label": "switchScan",
        "path": "api/operators/switchScan",
        "docType": "function"
    },
    "403d": {
        "id": "403d",
        "label": "mapTo"
    },
    "ea32": {
        "id": "ea32",
        "label": "to be a constant value",
        "options": [
            "403d"
        ]
    },
    "8ce0": {
        "id": "8ce0",
        "label": "map",
        "path": "api/operators/map",
        "docType": "function"
    },
    "f855": {
        "id": "f855",
        "label": "to be a value calculated through a formula",
        "options": [
            "8ce0"
        ]
    },
    "cedb": {
        "id": "cedb",
        "label": "I want to change each emitted value",
        "options": [
            "ea32",
            "f855"
        ]
    },
    "93fd": {
        "id": "93fd",
        "label": "pluck"
    },
    "b05d": {
        "id": "b05d",
        "label": "I want to pick a property off each emitted value",
        "options": [
            "93fd"
        ]
    },
    "777c": {
        "id": "777c",
        "label": "tap",
        "path": "api/operators/tap",
        "docType": "function"
    },
    "8d26": {
        "id": "8d26",
        "label": "I want to spy the values being emitted without affecting them",
        "options": [
            "777c"
        ]
    },
    "ac73": {
        "id": "ac73",
        "label": "I want to prepend one value",
        "options": [
            "b25f"
        ]
    },
    "df20": {
        "id": "df20",
        "label": "based on custom logic",
        "options": [
            "ac73"
        ]
    },
    "b312": {
        "id": "b312",
        "label": "first",
        "path": "api/operators/first",
        "docType": "function"
    },
    "25b7": {
        "id": "25b7",
        "label": "take",
        "path": "api/operators/take",
        "docType": "function"
    },
    "e4b6": {
        "id": "e4b6",
        "label": "based on a given amount",
        "options": [
            "25b7"
        ]
    },
    "324b": {
        "id": "324b",
        "label": "takeWhile",
        "path": "api/operators/takeWhile",
        "docType": "function"
    },
    "bbfb": {
        "id": "bbfb",
        "label": "based on custom logic",
        "options": [
            "324b"
        ]
    },
    "7f19": {
        "id": "7f19",
        "label": "elementAt",
        "path": "api/operators/elementAt",
        "docType": "function"
    },
    "3fd4": {
        "id": "3fd4",
        "label": "if they are exactly the n-th emission",
        "options": [
            "7f19"
        ]
    },
    "a6fa": {
        "id": "a6fa",
        "label": "last",
        "path": "api/operators/last",
        "docType": "function"
    },
    "13f0": {
        "id": "13f0",
        "label": "and only the last value",
        "options": [
            "a6fa"
        ]
    },
    "c0c2": {
        "id": "c0c2",
        "label": "takeLast",
        "path": "api/operators/takeLast",
        "docType": "function"
    },
    "ec44": {
        "id": "ec44",
        "label": "based on a given amount",
        "options": [
            "c0c2"
        ]
    },
    "0659": {
        "id": "0659",
        "label": "if they are at the end of the Observable",
        "options": [
            "13f0",
            "ec44"
        ]
    },
    "0f5d": {
        "id": "0f5d",
        "label": "until another Observable emits a value",
        "options": [
            "9798"
        ]
    },
    "d2ec": {
        "id": "d2ec",
        "label": "ignoreElements",
        "path": "api/operators/ignoreElements",
        "docType": "function"
    },
    "20d3": {
        "id": "20d3",
        "label": "altogether",
        "options": [
            "d2ec"
        ]
    },
    "cc61": {
        "id": "cc61",
        "label": "based on a given amount",
        "options": [
            "1637"
        ]
    },
    "3c36": {
        "id": "3c36",
        "label": "skipWhile",
        "path": "api/operators/skipWhile",
        "docType": "function"
    },
    "d5f7": {
        "id": "d5f7",
        "label": "based on custom logic",
        "options": [
            "3c36"
        ]
    },
    "0233": {
        "id": "0233",
        "label": "from the start of the Observable",
        "options": [
            "cc61",
            "d5f7"
        ]
    },
    "d64d": {
        "id": "d64d",
        "label": "skipLast",
        "path": "api/operators/skipLast",
        "docType": "function"
    },
    "02fb": {
        "id": "02fb",
        "label": "from the end of the Observable",
        "options": [
            "d64d"
        ]
    },
    "1f25": {
        "id": "1f25",
        "label": "until another Observable emits a value",
        "options": [
            "3552"
        ]
    },
    "7d25": {
        "id": "7d25",
        "label": "distinctUntilChanged",
        "path": "api/operators/distinctUntilChanged",
        "docType": "function"
    },
    "1b20": {
        "id": "1b20",
        "label": "emitted just before the current value",
        "options": [
            "7d25"
        ]
    },
    "46a5": {
        "id": "46a5",
        "label": "distinct",
        "path": "api/operators/distinct",
        "docType": "function"
    },
    "50ca": {
        "id": "50ca",
        "label": "emitted some time in the past",
        "options": [
            "46a5"
        ]
    },
    "15d6": {
        "id": "15d6",
        "label": "according to value equality",
        "options": [
            "1b20",
            "50ca"
        ]
    },
    "af3e": {
        "id": "af3e",
        "label": "distinctUntilKeyChanged",
        "path": "api/operators/distinctUntilKeyChanged",
        "docType": "function"
    },
    "059a": {
        "id": "059a",
        "label": "emitted just before the current value",
        "options": [
            "af3e"
        ]
    },
    "aa08": {
        "id": "aa08",
        "label": "according to a key or object property",
        "options": [
            "059a"
        ]
    },
    "a467": {
        "id": "a467",
        "label": "I want to know how many values it emits",
        "options": [
            "e58c"
        ]
    },
    "dc8b": {
        "id": "dc8b",
        "label": "throttle",
        "path": "api/operators/throttle",
        "docType": "function"
    },
    "c4fb": {
        "id": "c4fb",
        "label": "where time windows are determined by another Observable's emissions",
        "options": [
            "dc8b"
        ]
    },
    "d32c": {
        "id": "d32c",
        "label": "throttleTime",
        "path": "api/operators/throttleTime",
        "docType": "function"
    },
    "9ef0": {
        "id": "9ef0",
        "label": "by emitting the first value in each time window",
        "options": [
            "c4fb",
            "6118"
        ]
    },
    "a0ac": {
        "id": "a0ac",
        "label": "audit",
        "path": "api/operators/audit",
        "docType": "function"
    },
    "330a": {
        "id": "330a",
        "label": "where time windows are determined by another Observable's emissions",
        "options": [
            "a0ac"
        ]
    },
    "b242": {
        "id": "b242",
        "label": "auditTime",
        "path": "api/operators/auditTime",
        "docType": "function"
    },
    "960f": {
        "id": "960f",
        "label": "where time windows are determined by a time duration",
        "options": [
            "b242"
        ]
    },
    "1c28": {
        "id": "1c28",
        "label": "debounce",
        "path": "api/operators/debounce",
        "docType": "function"
    },
    "908c": {
        "id": "908c",
        "label": "where the silence duration threshold is determined by another Observable",
        "options": [
            "1c28"
        ]
    },
    "15e0": {
        "id": "15e0",
        "label": "debounceTime",
        "path": "api/operators/debounceTime",
        "docType": "function"
    },
    "70df": {
        "id": "70df",
        "label": "where the silence duration threshold is determined by a time duration",
        "options": [
            "15e0"
        ]
    },
    "0871": {
        "id": "0871",
        "label": "by emitting the last value as soon as enough silence has occurred",
        "options": [
            "908c",
            "70df"
        ]
    },
    "d596": {
        "id": "d596",
        "label": "that occur too frequently",
        "options": [
            "9ef0",
            "5388",
            "0871"
        ]
    },
    "6c88": {
        "id": "6c88",
        "label": "I want to ignore values",
        "options": [
            "20d3",
            "0233",
            "02fb",
            "1f25",
            "a467",
            "d596"
        ]
    },
    "7c9d": {
        "id": "7c9d",
        "label": "reduce",
        "path": "api/operators/reduce",
        "docType": "function"
    },
    "1d21": {
        "id": "1d21",
        "label": "and only output the final computed value",
        "options": [
            "7c9d"
        ]
    },
    "bbc1": {
        "id": "bbc1",
        "label": "scan",
        "path": "api/operators/scan",
        "docType": "function"
    },
    "1c18": {
        "id": "1c18",
        "label": "and output the computed values when the source emits a value",
        "options": [
            "bbc1"
        ]
    },
    "284c": {
        "id": "284c",
        "label": "mergeScan",
        "path": "api/operators/mergeScan",
        "docType": "function"
    },
    "b302": {
        "id": "b302",
        "label": "and output the computed values as a nested Observable when the source emits a value",
        "options": [
            "284c"
        ]
    },
    "e254": {
        "id": "e254",
        "label": "I want to compute a formula using all values emitted",
        "options": [
            "1d21",
            "1c18",
            "b302",
            "6733"
        ]
    },
    "f1de": {
        "id": "f1de",
        "label": "materialize",
        "path": "api/operators/materialize",
        "docType": "function"
    },
    "86d3": {
        "id": "86d3",
        "label": "that describes each notification (next, error, or complete)",
        "options": [
            "f1de"
        ]
    },
    "3db8": {
        "id": "3db8",
        "label": "timeInterval",
        "path": "api/operators/timeInterval",
        "docType": "function"
    },
    "d1de": {
        "id": "d1de",
        "label": "that includes the time past since the last emitted value",
        "options": [
            "3db8"
        ]
    },
    "b96b": {
        "id": "b96b",
        "label": "I want to wrap its messages with metadata",
        "options": [
            "86d3",
            "d1de"
        ]
    },
    "c7c0": {
        "id": "c7c0",
        "label": "timeout",
        "path": "api/operators/timeout",
        "docType": "function"
    },
    "48db": {
        "id": "48db",
        "label": "I want to throw an error",
        "options": [
            "c7c0"
        ]
    },
    "f627": {
        "id": "f627",
        "label": "timeoutWith"
    },
    "ec20": {
        "id": "ec20",
        "label": "I want to switch to another Observable",
        "options": [
            "f627"
        ]
    },
    "22ba": {
        "id": "22ba",
        "label": "after a period of inactivity",
        "options": [
            "48db",
            "ec20"
        ]
    },
    "8c3c": {
        "id": "8c3c",
        "label": "I want to ensure there is only one value",
        "options": [
            "7323"
        ]
    },
    "e58c": {
        "id": "e58c",
        "label": "count",
        "path": "api/operators/count",
        "docType": "function"
    },
    "b25f": {
        "id": "b25f",
        "label": "startWith",
        "path": "api/operators/startWith",
        "docType": "function"
    },
    "1e04": {
        "id": "1e04",
        "label": "delay",
        "path": "api/operators/delay",
        "docType": "function"
    },
    "45c1": {
        "id": "45c1",
        "label": "based on a given amount of time",
        "options": [
            "1e04"
        ]
    },
    "bdac": {
        "id": "bdac",
        "label": "based on the emissions of another Observable",
        "options": [
            "6406"
        ]
    },
    "b5b5": {
        "id": "b5b5",
        "label": "I want to delay the emissions",
        "options": [
            "45c1",
            "bdac"
        ]
    },
    "0695": {
        "id": "0695",
        "label": "toArray",
        "path": "api/operators/toArray",
        "docType": "function"
    },
    "efe5": {
        "id": "efe5",
        "label": "and convert to an array",
        "options": [
            "0695"
        ]
    },
    "72f1": {
        "id": "72f1",
        "label": "Observable",
        "path": "api/index/class/Observable",
        "docType": "class",
        "method": "toPromise"
    },
    "b0fd": {
        "id": "b0fd",
        "label": "and convert to a Promise",
        "options": [
            "72f1"
        ]
    },
    "cd10": {
        "id": "cd10",
        "label": "until the Observable completes",
        "options": [
            "efe5",
            "b0fd"
        ]
    },
    "4a37": {
        "id": "4a37",
        "label": "pairwise",
        "path": "api/operators/pairwise",
        "docType": "function"
    },
    "f1a9": {
        "id": "f1a9",
        "label": "consecutively in pairs, as arrays",
        "options": [
            "4a37"
        ]
    },
    "0473": {
        "id": "0473",
        "label": "partition",
        "path": "api/index/function/partition",
        "docType": "function"
    },
    "cd88": {
        "id": "cd88",
        "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
        "options": [
            "0473"
        ]
    },
    "ac8e": {
        "id": "ac8e",
        "label": "I want to share a subscription between multiple subscribers",
        "options": [
            "0f80",
            "39e4",
            "1c87",
            "d281",
            "ef3d"
        ]
    },
    "af8f": {
        "id": "af8f",
        "label": "and emit the group as an array",
        "options": [
            "ac8e"
        ]
    },
    "b551": {
        "id": "b551",
        "label": "windowCount",
        "path": "api/operators/windowCount",
        "docType": "function"
    },
    "f114": {
        "id": "f114",
        "label": "and emit the group as a nested Observable",
        "options": [
            "b551"
        ]
    },
    "9b8c": {
        "id": "9b8c",
        "label": "bufferTime",
        "path": "api/operators/bufferTime",
        "docType": "function"
    },
    "24a6": {
        "id": "24a6",
        "label": "and emit the group as an array",
        "options": [
            "9b8c"
        ]
    },
    "5cb4": {
        "id": "5cb4",
        "label": "windowTime",
        "path": "api/operators/windowTime",
        "docType": "function"
    },
    "111c": {
        "id": "111c",
        "label": "and emit the group as a nested Observable",
        "options": [
            "5cb4"
        ]
    },
    "d89a": {
        "id": "d89a",
        "label": "based on time",
        "options": [
            "24a6",
            "111c"
        ]
    },
    "c97c": {
        "id": "c97c",
        "label": "buffer",
        "path": "api/operators/buffer",
        "docType": "function"
    },
    "7d23": {
        "id": "7d23",
        "label": "and emit the group as an array",
        "options": [
            "c97c"
        ]
    },
    "993a": {
        "id": "993a",
        "label": "window",
        "path": "api/operators/window",
        "docType": "function"
    },
    "8ea0": {
        "id": "8ea0",
        "label": "and emit the group as a nested Observable",
        "options": [
            "993a"
        ]
    },
    "0d62": {
        "id": "0d62",
        "label": "until another Observable emits",
        "options": [
            "7d23",
            "8ea0"
        ]
    },
    "240f": {
        "id": "240f",
        "label": "bufferWhen",
        "path": "api/operators/bufferWhen",
        "docType": "function"
    },
    "c490": {
        "id": "c490",
        "label": "windowWhen",
        "path": "api/operators/windowWhen",
        "docType": "function"
    },
    "396e": {
        "id": "396e",
        "label": "and emit the group as a nested Observable",
        "options": [
            "c490"
        ]
    },
    "df9e": {
        "id": "df9e",
        "label": "based on the emissions of an Observable created on-demand",
        "options": [
            "4664",
            "396e"
        ]
    },
    "d902": {
        "id": "d902",
        "label": "bufferToggle",
        "path": "api/operators/bufferToggle",
        "docType": "function"
    },
    "b912": {
        "id": "b912",
        "label": "and emit the group as an array",
        "options": [
            "d902"
        ]
    },
    "a01e": {
        "id": "a01e",
        "label": "windowToggle",
        "path": "api/operators/windowToggle",
        "docType": "function"
    },
    "3b99": {
        "id": "3b99",
        "label": "and emit the group as a nested Observable",
        "options": [
            "a01e"
        ]
    },
    "87d3": {
        "id": "87d3",
        "label": "based on another Observable for opening a group, and an Observable for closing a group",
        "options": [
            "b912",
            "3b99"
        ]
    },
    "0e5d": {
        "id": "0e5d",
        "label": "groupBy",
        "path": "api/operators/groupBy",
        "docType": "function"
    },
    "eddc": {
        "id": "eddc",
        "label": "based on a key calculated from the emitted values",
        "options": [
            "0e5d"
        ]
    },
    "2ecb": {
        "id": "2ecb",
        "label": "I want to group the values",
        "options": [
            "cd10",
            "f1a9",
            "cd88",
            "7741",
            "d89a",
            "0d62",
            "df9e",
            "87d3",
            "eddc"
        ]
    },
    "42f0": {
        "id": "42f0",
        "label": "mergeMapTo"
    },
    "eccc": {
        "id": "eccc",
        "label": "where the nested Observable is the same for every value",
        "options": [
            "42f0"
        ]
    },
    "3b40": {
        "id": "3b40",
        "label": "mergeMap",
        "path": "api/operators/mergeMap",
        "docType": "function"
    },
    "1f71": {
        "id": "1f71",
        "label": "and emit the values from all nested Observables in parallel",
        "options": [
            "eccc",
            "5797"
        ]
    },
    "78c7": {
        "id": "78c7",
        "label": "concatMapTo"
    },
    "d044": {
        "id": "d044",
        "label": "where the nested Observable is the same for every value",
        "options": [
            "78c7"
        ]
    },
    "e79e": {
        "id": "e79e",
        "label": "concatMap",
        "path": "api/operators/concatMap",
        "docType": "function"
    },
    "ef93": {
        "id": "ef93",
        "label": "where the nested Observable is calculated for each value",
        "options": [
            "e79e"
        ]
    },
    "cf39": {
        "id": "cf39",
        "label": "and emit the values from each nested Observable in order",
        "options": [
            "d044",
            "ef93"
        ]
    },
    "96da": {
        "id": "96da",
        "label": "switchMapTo"
    },
    "9ede": {
        "id": "9ede",
        "label": "where the nested Observable is calculated for each value",
        "options": [
            "6374"
        ]
    },
    "f15a": {
        "id": "f15a",
        "label": "exhaustMap",
        "path": "api/operators/exhaustMap",
        "docType": "function"
    },
    "c298": {
        "id": "c298",
        "label": "and ignore incoming values while the current nested Observable has not yet completed",
        "options": [
            "f15a"
        ]
    },
    "da41": {
        "id": "da41",
        "label": "expand",
        "path": "api/operators/expand",
        "docType": "function"
    },
    "60e5": {
        "id": "60e5",
        "label": "and recursively start a new Observable for each new value",
        "options": [
            "da41"
        ]
    },
    "9bae": {
        "id": "9bae",
        "label": "I want to start a new Observable for each value",
        "options": [
            "1f71",
            "cf39",
            "1031",
            "c298",
            "60e5"
        ]
    },
    "162c": {
        "id": "162c",
        "label": "pipe",
        "path": "api/index/function/pipe",
        "docType": "function"
    },
    "5c18": {
        "id": "5c18",
        "label": "I want to perform custom operations",
        "options": [
            "162c"
        ]
    },
    "d363": {
        "id": "d363",
        "label": "share",
        "path": "api/operators/share",
        "docType": "function"
    },
    "f673": {
        "id": "f673",
        "label": "and start it as soon as the first subscriber arrives",
        "options": [
            "d363"
        ]
    },
    "cd1b": {
        "id": "cd1b",
        "label": "publish"
    },
    "c549": {
        "id": "c549",
        "label": "and start it manually or imperatively",
        "options": [
            "cd1b"
        ]
    },
    "0f80": {
        "id": "0f80",
        "label": "using a conventional Subject",
        "options": [
            "f673",
            "c549"
        ]
    },
    "39e4": {
        "id": "39e4",
        "label": "using a BehaviorSubject",
        "options": [
            "1966"
        ]
    },
    "d164": {
        "id": "d164",
        "label": "publishReplay"
    },
    "1c87": {
        "id": "1c87",
        "label": "using a ReplaySubject",
        "options": [
            "d164"
        ]
    },
    "54b5": {
        "id": "54b5",
        "label": "publishLast"
    },
    "d281": {
        "id": "d281",
        "label": "using an AsyncSubject",
        "options": [
            "54b5"
        ]
    },
    "df7c": {
        "id": "df7c",
        "label": "multicast"
    },
    "ef3d": {
        "id": "ef3d",
        "label": "using a specific subject implementation",
        "options": [
            "df7c"
        ]
    },
    "d964": {
        "id": "d964",
        "label": "catchError",
        "path": "api/operators/catchError",
        "docType": "function"
    },
    "ec27": {
        "id": "ec27",
        "label": "I want to start a new Observable",
        "options": [
            "d964"
        ]
    },
    "8aa9": {
        "id": "8aa9",
        "label": "retry",
        "path": "api/operators/retry",
        "docType": "function"
    },
    "aec0": {
        "id": "aec0",
        "label": "immediately",
        "options": [
            "8aa9"
        ]
    },
    "4d39": {
        "id": "4d39",
        "label": "retryWhen"
    },
    "da4f": {
        "id": "da4f",
        "label": "when another Observable emits",
        "options": [
            "4d39"
        ]
    },
    "b3cb": {
        "id": "b3cb",
        "label": "when an error occurs",
        "options": [
            "ec27",
            "7611"
        ]
    },
    "f2fa": {
        "id": "f2fa",
        "label": "repeat",
        "path": "api/operators/repeat",
        "docType": "function"
    },
    "5bbc": {
        "id": "5bbc",
        "label": "immediately",
        "options": [
            "f2fa"
        ]
    },
    "1be3": {
        "id": "1be3",
        "label": "repeatWhen"
    },
    "b9a2": {
        "id": "b9a2",
        "label": "when another Observable emits",
        "options": [
            "1be3"
        ]
    },
    "3f4b": {
        "id": "3f4b",
        "label": "I want to re-subscribe",
        "options": [
            "5bbc",
            "b9a2"
        ]
    },
    "6b3d": {
        "id": "6b3d",
        "label": "I want to start a new Observable",
        "options": [
            "2489"
        ]
    },
    "2abf": {
        "id": "2abf",
        "label": "when it completes",
        "options": [
            "3f4b",
            "6b3d"
        ]
    },
    "2f69": {
        "id": "2f69",
        "label": "finalize",
        "path": "api/operators/finalize",
        "docType": "function"
    },
    "98f1": {
        "id": "98f1",
        "label": "when it completes, errors or unsubscribes, I want to execute a function",
        "options": [
            "2f69"
        ]
    },
    "2a7a": {
        "id": "2a7a",
        "label": "subscribeOn",
        "path": "api/operators/subscribeOn",
        "docType": "function"
    },
    "e2ab": {
        "id": "e2ab",
        "label": "that routes calls to subscribe",
        "options": [
            "2a7a"
        ]
    },
    "4df1": {
        "id": "4df1",
        "label": "observeOn",
        "path": "api/operators/observeOn",
        "docType": "function"
    },
    "a308": {
        "id": "a308",
        "label": "that routes values to observers",
        "options": [
            "4df1"
        ]
    },
    "a6b7": {
        "id": "a6b7",
        "label": "I want to change the scheduler",
        "options": [
            "e2ab",
            "a308"
        ]
    },
    "2a6a": {
        "id": "2a6a",
        "label": "race",
        "path": "api/index/function/race",
        "docType": "function"
    },
    "b3ec": {
        "id": "b3ec",
        "label": "I want to receive values only from the Observable that emits a value first",
        "options": [
            "2a6a"
        ]
    },
    "2b00": {
        "id": "2b00",
        "label": "merge",
        "path": "api/operators/merge",
        "docType": "function"
    },
    "e24c": {
        "id": "e24c",
        "label": "combineLatest",
        "path": "api/index/function/combineLatest",
        "docType": "function"
    },
    "b2a1": {
        "id": "b2a1",
        "label": "using the latest value of each source whenever any source emits",
        "options": [
            "e24c"
        ]
    },
    "f60f": {
        "id": "f60f",
        "label": "withLatestFrom",
        "path": "api/operators/withLatestFrom",
        "docType": "function"
    },
    "737a": {
        "id": "737a",
        "label": "using the latest value of each source only when the primary Observable emits",
        "options": [
            "f60f"
        ]
    },
    "65f6": {
        "id": "65f6",
        "label": "zip",
        "path": "api/index/function/zip",
        "docType": "function"
    },
    "8f4b": {
        "id": "8f4b",
        "label": "using each source value only once",
        "options": [
            "65f6"
        ]
    },
    "0eec": {
        "id": "0eec",
        "label": "I want to combine this Observable with others, and",
        "options": [
            "b3ec",
            "5158",
            "1247"
        ]
    },
    "0c93": {
        "id": "0c93",
        "label": "I have one existing Observable, and",
        "options": [
            "cedb",
            "b05d",
            "8d26",
            "5583",
            "6c88",
            "e254",
            "b96b",
            "22ba",
            "8c3c",
            "a467",
            "ac73",
            "b5b5",
            "2ecb",
            "9bae",
            "5c18",
            "ac8e",
            "b3cb",
            "2abf",
            "98f1",
            "a6b7",
            "0eec"
        ]
    },
    "4ae6": {
        "id": "4ae6",
        "label": "race",
        "path": "api/index/function/race",
        "docType": "function"
    },
    "811f": {
        "id": "811f",
        "label": "I want to receive values only from the Observable that emits a value first",
        "options": [
            "4ae6"
        ]
    },
    "c0b1": {
        "id": "c0b1",
        "label": "forkJoin",
        "path": "api/index/function/forkJoin",
        "docType": "function"
    },
    "015e": {
        "id": "015e",
        "label": "I want to be notified when all of them have completed",
        "options": [
            "c0b1"
        ]
    },
    "5c0b": {
        "id": "5c0b",
        "label": "merge",
        "path": "api/operators/merge",
        "docType": "function"
    },
    "402d": {
        "id": "402d",
        "label": "I want to output the values from either of them",
        "options": [
            "5c0b"
        ]
    },
    "f683": {
        "id": "f683",
        "label": "combineLatest",
        "path": "api/index/function/combineLatest",
        "docType": "function"
    },
    "530e": {
        "id": "530e",
        "label": "using the latest value of each source whenever any source emits",
        "options": [
            "f683"
        ]
    },
    "9c4f": {
        "id": "9c4f",
        "label": "zip",
        "path": "api/index/function/zip",
        "docType": "function"
    },
    "4b7b": {
        "id": "4b7b",
        "label": "using each source value only once",
        "options": [
            "9c4f"
        ]
    },
    "a32a": {
        "id": "a32a",
        "label": "concat",
        "path": "api/index/function/concat",
        "docType": "function"
    },
    "5c43": {
        "id": "5c43",
        "label": "I have some Observables to combine together as one Observable, and",
        "options": [
            "811f",
            "015e",
            "402d",
            "6347",
            "8173"
        ]
    },
    "9f9f": {
        "id": "9f9f",
        "label": "Observable",
        "path": "api/index/class/Observable",
        "docType": "class",
        "method": "create"
    },
    "8ca8": {
        "id": "8ca8",
        "label": "using custom logic",
        "options": [
            "9f9f"
        ]
    },
    "627e": {
        "id": "627e",
        "label": "generate",
        "path": "api/index/function/generate",
        "docType": "function"
    },
    "b831": {
        "id": "b831",
        "label": "using a state machine similar to a for loop",
        "options": [
            "627e"
        ]
    },
    "a790": {
        "id": "a790",
        "label": "throwError",
        "path": "api/index/function/throwError",
        "docType": "function"
    },
    "d9ab": {
        "id": "d9ab",
        "label": "that throws an error",
        "options": [
            "a790"
        ]
    },
    "be17": {
        "id": "be17",
        "label": "EMPTY",
        "path": "api/index/const/EMPTY",
        "docType": "const"
    },
    "f20a": {
        "id": "f20a",
        "label": "that just completes, without emitting values",
        "options": [
            "be17"
        ]
    },
    "c723": {
        "id": "c723",
        "label": "NEVER",
        "path": "api/index/const/NEVER",
        "docType": "const"
    },
    "0a3f": {
        "id": "0a3f",
        "label": "that never emits anything",
        "options": [
            "c723"
        ]
    },
    "03f5": {
        "id": "03f5",
        "label": "fromEvent",
        "path": "api/index/function/fromEvent",
        "docType": "function"
    },
    "af67": {
        "id": "af67",
        "label": "fromEventPattern",
        "path": "api/index/function/fromEventPattern",
        "docType": "function"
    },
    "80a5": {
        "id": "80a5",
        "label": "that uses an API to add and remove event handlers",
        "options": [
            "af67"
        ]
    },
    "da4b": {
        "id": "da4b",
        "label": "from an existing source of events",
        "options": [
            "8608",
            "80a5"
        ]
    },
    "6b6d": {
        "id": "6b6d",
        "label": "from",
        "path": "api/index/function/from",
        "docType": "function"
    },
    "c69b": {
        "id": "c69b",
        "label": "from a Promise or an event source",
        "options": [
            "6b6d"
        ]
    },
    "5ac0": {
        "id": "5ac0",
        "label": "from",
        "path": "api/index/function/from",
        "docType": "function"
    },
    "71aa": {
        "id": "71aa",
        "label": "over the values in an array",
        "options": [
            "5ac0"
        ]
    },
    "5a49": {
        "id": "5a49",
        "label": "range",
        "path": "api/index/function/range",
        "docType": "function"
    },
    "e721": {
        "id": "e721",
        "label": "over values in a numeric range",
        "options": [
            "5a49"
        ]
    },
    "9ba9": {
        "id": "9ba9",
        "label": "of",
        "path": "api/index/function/of",
        "docType": "function"
    },
    "e67f": {
        "id": "e67f",
        "label": "over prefined values given as arguments",
        "options": [
            "9ba9"
        ]
    },
    "16cd": {
        "id": "16cd",
        "label": "that iterates",
        "options": [
            "71aa",
            "e721",
            "e67f"
        ]
    },
    "0931": {
        "id": "0931",
        "label": "interval",
        "path": "api/index/function/interval",
        "docType": "function"
    },
    "304a": {
        "id": "304a",
        "label": "regularly",
        "options": [
            "0931"
        ]
    },
    "0790": {
        "id": "0790",
        "label": "timer",
        "path": "api/index/function/timer",
        "docType": "function"
    },
    "47b4": {
        "id": "47b4",
        "label": "with an optional initial delay",
        "options": [
            "0790"
        ]
    },
    "eb72": {
        "id": "eb72",
        "label": "that emits values on a timer",
        "options": [
            "304a",
            "47b4"
        ]
    },
    "1c7c": {
        "id": "1c7c",
        "label": "which is built on demand when subscribed",
        "options": [
            "5579"
        ]
    },
    "edc1": {
        "id": "edc1",
        "label": "I want to create a new Observable",
        "options": [
            "8ca8",
            "b831",
            "d9ab",
            "f20a",
            "0a3f",
            "da4b",
            "c69b",
            "16cd",
            "eb72",
            "1c7c"
        ]
    },
    "fc5b": {
        "id": "fc5b",
        "label": "bindCallback",
        "path": "api/index/function/bindCallback",
        "docType": "function"
    },
    "77ab": {
        "id": "77ab",
        "label": "supporting a conventional callback API",
        "options": [
            "fc5b"
        ]
    },
    "728e": {
        "id": "728e",
        "label": "bindNodeCallback",
        "path": "api/index/function/bindNodeCallback",
        "docType": "function"
    },
    "e4d9": {
        "id": "e4d9",
        "label": "I want to convert a callback to an Observable",
        "options": [
            "77ab",
            "3122"
        ]
    },
    "39c5": {
        "id": "39c5",
        "label": "I have no Observables yet, and",
        "options": [
            "edc1",
            "e4d9"
        ]
    },
    "initial": {
        "id": "initial",
        "options": [
            "0c93",
            "5c43",
            "39c5"
        ]
    }
}